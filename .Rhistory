blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
library(hugo)
library(blogdown)
install.packages("hugo")
library(hugo)
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
library(blogdown)
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdown::build_site()
blogdown::serve_site()
library(blogdown)
blogdown::build_site()
blogdown::serve_site()
library(blogdown)
blogdown::build_site()
blogdown::serve_site()
library(blogdown)
blogdown::build_site()
blogdown::serve_site()
library(blogdown)
blogdown::build_site()
blogdown::serve_site()
library(blogdown)
blogdown::build_site()
blogdown::serve_site()
library(blogdown)
blogdown::build_site()
blogdown::serve_site()
install.packages("statnetWeb")
library(statnetWeb)
run_sw()
attr <- read_excel("BGC SNA/Data/Time 1/Kenosha Morning/KMT1ego.xlsx")
library(network)
library(statnet)
library(sna)
library(readxl)
library(xlsx)
attr <- read_excel("BGC SNA/Data/Time 1/Kenosha Morning/KMT1ego.xlsx")
attr <- read_excel("Data/Time 1/Kenosha Morning/KMT1ego.xlsx")
library(blogdown)
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
stergm?
#Coalition SNA Collaborations
install.packages("network")
?stergm
blogdown::build_site()
blogdown::serve_site()
library(network)
library(statnet)
library(sna)
library(readxl)
library(xlsx)
library(tidyverse)
library(RSiena)
attr1<- read_excel('~/Classes/TAMU/ASNAH/Labs/Lab4attrT1.xlsx',col_names = T)
attr2<- read_excel('~/Classes/TAMU/ASNAH/Labs/Lab4attrT2.xlsx',col_names = T)
#Read in edge list
edges1 <- read_excel("~/Classes/TAMU/ASNAH/Labs/Lab4netT1.xlsx",col_names = T)
edges2 <- read_excel("~/Classes/TAMU/ASNAH/Labs/Lab4netT2.xlsx",col_names = T)
#create a node list for all possible nodes
nodes<-distinct(as.data.frame(c(edges1$Ego,edges1$Alter,edges2$Ego,edges2$Alter,attr2$Ego,attr1$Ego)))
#Rename column for better use
nodes<-rename(nodes,"Ego"=`c(edges1$Ego, edges1$Alter, edges2$Ego, edges2$Alter, attr2$Ego, attr1$Ego)`)
#Join to match attributes with edge list
nodes1 <- left_join(nodes, attr1, by="Ego")
nodes2 <- left_join(nodes, attr2, by="Ego")
#Reorder and ID nodes
nodes1<-mutate(nodes1, newID=1:138)
nodes2<-mutate(nodes2, newID=1:138)
edges1 <- left_join(edges1, nodes1, by="Ego")
edges1 <- select(edges1, newID, Alter)
edges1 <- rename(edges1, Ego="Alter", sender="newID")
edges1 <- left_join(edges1, nodes1, by="Ego")
edges1 <- select(edges1, sender, newID)
edges1 <- rename(edges1, target="newID")
nodes1<-nodes1%>% select(newID,everything())
names(nodes1)[1] <- "sender"
edges2 <- left_join(edges2, nodes2, by="Ego")
edges2 <- select(edges2, newID, Alter)
edges2 <- rename(edges2, Ego="Alter", sender="newID")
edges2 <- left_join(edges2, nodes2, by="Ego")
edges2 <- select(edges2, sender, newID)
edges2 <- rename(edges2, target="newID")
nodes2<-nodes2%>% select(newID,everything())
names(nodes2)[1] <- "sender"
nodes<-as.data.frame(left_join(nodes1,nodes2,by="sender"))
network1 <- as.network(edges1, vertices=nodes, directed=T)
network2 <- as.network(edges2, vertices=nodes, directed=T)
#SIENA IS ROBUST FOR MISSING DATA AND WILL IMPUTE SO WE DO NOT NEED THESE LINES
#Remove nodes that do not have self reported information in either network
network1<-delete.vertices(network1 , which(is.na(network1 %v% "Age.x")))
network2<-delete.vertices(network2 , which(is.na(network2 %v% "Age.y")))
network1<-delete.vertices(network1 , which(is.na(network1 %v% "Age.y")))
network2<-delete.vertices(network2 , which(is.na(network2 %v% "Age.x")))
#Remove NA's from the attribute table
nodes<-nodes %>%drop_na(Age.x)
nodes<-nodes %>%drop_na(Age.y)
##Elementary graph-level indices
gden(network1) # Density
grecip(network1) # Dyadic reciprocity
gtrans(network1) # Transitivity
grecip(network1, measure="edgewise") # Edgewise reciprocity
##Elementary graph-level indices
gden(network2) # Density
grecip(network2) # Dyadic reciprocity
grecip(network2, measure="edgewise") # Edgewise reciprocity
gtrans(network2) # Transitivity
